
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"	
	"github.com/kcp-dev/logicalcluster/v3"
	
	"k8s.io/client-go/tools/cache"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/api/errors"

	kuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/apis/kuadrant/v1"
	)

// DomainVerificationClusterLister can list DomainVerifications across all workspaces, or scope down to a DomainVerificationLister for one workspace.
// All objects returned here must be treated as read-only.
type DomainVerificationClusterLister interface {
	// List lists all DomainVerifications in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kuadrantv1.DomainVerification, err error)
	// Cluster returns a lister that can list and get DomainVerifications in one workspace.
Cluster(clusterName logicalcluster.Name) DomainVerificationLister
DomainVerificationClusterListerExpansion
}

type domainVerificationClusterLister struct {
	indexer cache.Indexer
}

// NewDomainVerificationClusterLister returns a new DomainVerificationClusterLister.
// We assume that the indexer:
// - is fed by a cross-workspace LIST+WATCH
// - uses kcpcache.MetaClusterNamespaceKeyFunc as the key function
// - has the kcpcache.ClusterIndex as an index
func NewDomainVerificationClusterLister(indexer cache.Indexer) *domainVerificationClusterLister {
	return &domainVerificationClusterLister{indexer: indexer}
}

// List lists all DomainVerifications in the indexer across all workspaces.
func (s *domainVerificationClusterLister) List(selector labels.Selector) (ret []*kuadrantv1.DomainVerification, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*kuadrantv1.DomainVerification))
	})
	return ret, err
}

// Cluster scopes the lister to one workspace, allowing users to list and get DomainVerifications.
func (s *domainVerificationClusterLister) Cluster(clusterName logicalcluster.Name) DomainVerificationLister {
return &domainVerificationLister{indexer: s.indexer, clusterName: clusterName}
}

// DomainVerificationLister can list all DomainVerifications, or get one in particular.
// All objects returned here must be treated as read-only.
type DomainVerificationLister interface {
	// List lists all DomainVerifications in the workspace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*kuadrantv1.DomainVerification, err error)
// Get retrieves the DomainVerification from the indexer for a given workspace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*kuadrantv1.DomainVerification, error)
DomainVerificationListerExpansion
}
// domainVerificationLister can list all DomainVerifications inside a workspace.
type domainVerificationLister struct {
	indexer cache.Indexer
	clusterName logicalcluster.Name
}

// List lists all DomainVerifications in the indexer for a workspace.
func (s *domainVerificationLister) List(selector labels.Selector) (ret []*kuadrantv1.DomainVerification, err error) {
	err = kcpcache.ListAllByCluster(s.indexer, s.clusterName, selector, func(i interface{}) {
		ret = append(ret, i.(*kuadrantv1.DomainVerification))
	})
	return ret, err
}

// Get retrieves the DomainVerification from the indexer for a given workspace and name.
func (s *domainVerificationLister) Get(name string) (*kuadrantv1.DomainVerification, error) {
	key := kcpcache.ToClusterAwareKey(s.clusterName.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kuadrantv1.Resource("DomainVerification"), name)
	}
	return obj.(*kuadrantv1.DomainVerification), nil
}
// NewDomainVerificationLister returns a new DomainVerificationLister.
// We assume that the indexer:
// - is fed by a workspace-scoped LIST+WATCH
// - uses cache.MetaNamespaceKeyFunc as the key function
func NewDomainVerificationLister(indexer cache.Indexer) *domainVerificationScopedLister {
	return &domainVerificationScopedLister{indexer: indexer}
}

// domainVerificationScopedLister can list all DomainVerifications inside a workspace.
type domainVerificationScopedLister struct {
	indexer cache.Indexer
}

// List lists all DomainVerifications in the indexer for a workspace.
func (s *domainVerificationScopedLister) List(selector labels.Selector) (ret []*kuadrantv1.DomainVerification, err error) {
	err = cache.ListAll(s.indexer, selector, func(i interface{}) {
		ret = append(ret, i.(*kuadrantv1.DomainVerification))
	})
	return ret, err
}

// Get retrieves the DomainVerification from the indexer for a given workspace and name.
func (s *domainVerificationScopedLister) Get(name string) (*kuadrantv1.DomainVerification, error) {
	key := name
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(kuadrantv1.Resource("DomainVerification"), name)
	}
	return obj.(*kuadrantv1.DomainVerification), nil
}
