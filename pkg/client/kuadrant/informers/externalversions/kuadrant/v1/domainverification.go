
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"

	kcpcache "github.com/kcp-dev/apimachinery/v2/pkg/cache"
	kcpinformers "github.com/kcp-dev/apimachinery/v2/third_party/informers"
	"github.com/kcp-dev/logicalcluster/v3"

	kuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/apis/kuadrant/v1"
	kuadrantv1listers "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/listers/kuadrant/v1"
	clientset "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/clientset/versioned/cluster"
	scopedclientset "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/clientset/versioned"
	"github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/informers/externalversions/internalinterfaces"
)

// DomainVerificationClusterInformer provides access to a shared informer and lister for
// DomainVerifications.
type DomainVerificationClusterInformer interface {
	Cluster(logicalcluster.Name) DomainVerificationInformer
	Informer() kcpcache.ScopeableSharedIndexInformer
	Lister() kuadrantv1listers.DomainVerificationClusterLister
}

type domainVerificationClusterInformer struct {
	factory internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewDomainVerificationClusterInformer constructs a new informer for DomainVerification type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDomainVerificationClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredDomainVerificationClusterInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredDomainVerificationClusterInformer constructs a new informer for DomainVerification type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDomainVerificationClusterInformer(client clientset.ClusterInterface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) kcpcache.ScopeableSharedIndexInformer {
	return kcpinformers.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KuadrantV1().DomainVerifications().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KuadrantV1().DomainVerifications().Watch(context.TODO(), options)
			},
		},
		&kuadrantv1.DomainVerification{},
		resyncPeriod,
		indexers,
	)
}

func (f *domainVerificationClusterInformer) defaultInformer(client clientset.ClusterInterface, resyncPeriod time.Duration) kcpcache.ScopeableSharedIndexInformer {
	return NewFilteredDomainVerificationClusterInformer(client, resyncPeriod, cache.Indexers{
			kcpcache.ClusterIndexName: kcpcache.ClusterIndexFunc,
			}, 
		f.tweakListOptions,
	)
}

func (f *domainVerificationClusterInformer) Informer() kcpcache.ScopeableSharedIndexInformer {
	return f.factory.InformerFor(&kuadrantv1.DomainVerification{}, f.defaultInformer)
}

func (f *domainVerificationClusterInformer) Lister() kuadrantv1listers.DomainVerificationClusterLister {
	return kuadrantv1listers.NewDomainVerificationClusterLister(f.Informer().GetIndexer())
}


// DomainVerificationInformer provides access to a shared informer and lister for
// DomainVerifications.
type DomainVerificationInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() kuadrantv1listers.DomainVerificationLister
}
func (f *domainVerificationClusterInformer) Cluster(clusterName logicalcluster.Name) DomainVerificationInformer {
	return &domainVerificationInformer{
		informer: f.Informer().Cluster(clusterName),
		lister:   f.Lister().Cluster(clusterName),
	}
}

type domainVerificationInformer struct {
	informer cache.SharedIndexInformer
	lister kuadrantv1listers.DomainVerificationLister
}

func (f *domainVerificationInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

func (f *domainVerificationInformer) Lister() kuadrantv1listers.DomainVerificationLister {
	return f.lister
}

type domainVerificationScopedInformer struct {
	factory internalinterfaces.SharedScopedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	}

func (f *domainVerificationScopedInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&kuadrantv1.DomainVerification{}, f.defaultInformer)
}

func (f *domainVerificationScopedInformer) Lister() kuadrantv1listers.DomainVerificationLister {
	return kuadrantv1listers.NewDomainVerificationLister(f.Informer().GetIndexer())
}

// NewDomainVerificationInformer constructs a new informer for DomainVerification type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewDomainVerificationInformer(client scopedclientset.Interface, resyncPeriod time.Duration,indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredDomainVerificationInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredDomainVerificationInformer constructs a new informer for DomainVerification type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredDomainVerificationInformer(client scopedclientset.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KuadrantV1().DomainVerifications().List(context.TODO(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.KuadrantV1().DomainVerifications().Watch(context.TODO(), options)
			},
		},
		&kuadrantv1.DomainVerification{},
		resyncPeriod,
		indexers,
	)
}

func (f *domainVerificationScopedInformer) defaultInformer(client scopedclientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredDomainVerificationInformer(client, resyncPeriod,cache.Indexers{ }, f.tweakListOptions)
}

