
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"net/http"

	kcpclient "github.com/kcp-dev/apimachinery/v2/pkg/client"
	"github.com/kcp-dev/logicalcluster/v3"

	"k8s.io/client-go/rest"

	kuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/clientset/versioned/typed/kuadrant/v1"
)

type KuadrantV1ClusterInterface interface {
	KuadrantV1ClusterScoper
	DomainVerificationsClusterGetter
	DNSRecordsClusterGetter
}

type KuadrantV1ClusterScoper interface {
	Cluster(logicalcluster.Path) kuadrantv1.KuadrantV1Interface
}

type KuadrantV1ClusterClient struct {
	clientCache kcpclient.Cache[*kuadrantv1.KuadrantV1Client]
}

func (c *KuadrantV1ClusterClient) Cluster(clusterPath logicalcluster.Path) kuadrantv1.KuadrantV1Interface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}
	return c.clientCache.ClusterOrDie(clusterPath)
}


func (c *KuadrantV1ClusterClient) DomainVerifications() DomainVerificationClusterInterface {
	return &domainVerificationsClusterInterface{clientCache: c.clientCache}
}

func (c *KuadrantV1ClusterClient) DNSRecords() DNSRecordClusterInterface {
	return &dNSRecordsClusterInterface{clientCache: c.clientCache}
}
// NewForConfig creates a new KuadrantV1ClusterClient for the given config.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*KuadrantV1ClusterClient, error) {
	client, err := rest.HTTPClientFor(c)
	if err != nil {
		return nil, err
	}
	return NewForConfigAndClient(c, client)
}

// NewForConfigAndClient creates a new KuadrantV1ClusterClient for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
func NewForConfigAndClient(c *rest.Config, h *http.Client) (*KuadrantV1ClusterClient, error) {
	cache := kcpclient.NewCache(c, h, &kcpclient.Constructor[*kuadrantv1.KuadrantV1Client]{
		NewForConfigAndClient: kuadrantv1.NewForConfigAndClient,
	})
	if _, err := cache.Cluster(logicalcluster.Name("root").Path()); err != nil {
		return nil, err
	}
	return &KuadrantV1ClusterClient{clientCache: cache}, nil
}

// NewForConfigOrDie creates a new KuadrantV1ClusterClient for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *KuadrantV1ClusterClient {
	client, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return client
}
