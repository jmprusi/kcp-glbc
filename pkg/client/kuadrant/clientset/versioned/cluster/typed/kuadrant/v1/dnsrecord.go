
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpclient "github.com/kcp-dev/apimachinery/v2/pkg/client"
	"github.com/kcp-dev/logicalcluster/v3"
	"context"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/watch"
	kuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/apis/kuadrant/v1"


	kuadrantv1client "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/clientset/versioned/typed/kuadrant/v1"
)

// DNSRecordsClusterGetter has a method to return a DNSRecordClusterInterface.
// A group's cluster client should implement this interface.
type DNSRecordsClusterGetter interface {
	DNSRecords() DNSRecordClusterInterface
}

// DNSRecordClusterInterface can operate on DNSRecords across all clusters,
// or scope down to one cluster and return a DNSRecordsNamespacer.
type DNSRecordClusterInterface interface {
	Cluster(logicalcluster.Path) DNSRecordsNamespacer
	List(ctx context.Context, opts metav1.ListOptions) (*kuadrantv1.DNSRecordList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
}

type dNSRecordsClusterInterface struct {
	clientCache kcpclient.Cache[*kuadrantv1client.KuadrantV1Client]
}

// Cluster scopes the client down to a particular cluster.
func (c *dNSRecordsClusterInterface) Cluster(clusterPath logicalcluster.Path) DNSRecordsNamespacer {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return &dNSRecordsNamespacer{clientCache: c.clientCache, clusterPath: clusterPath}
}


// List returns the entire collection of all DNSRecords across all clusters. 
func (c *dNSRecordsClusterInterface) List(ctx context.Context, opts metav1.ListOptions) (*kuadrantv1.DNSRecordList, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).DNSRecords(metav1.NamespaceAll).List(ctx, opts)
}

// Watch begins to watch all DNSRecords across all clusters.
func (c *dNSRecordsClusterInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).DNSRecords(metav1.NamespaceAll).Watch(ctx, opts)
}
// DNSRecordsNamespacer can scope to objects within a namespace, returning a kuadrantv1client.DNSRecordInterface.
type DNSRecordsNamespacer interface {
	Namespace(string) kuadrantv1client.DNSRecordInterface
}

type dNSRecordsNamespacer struct {
	clientCache kcpclient.Cache[*kuadrantv1client.KuadrantV1Client]
	clusterPath logicalcluster.Path
}

func (n *dNSRecordsNamespacer) Namespace(namespace string) kuadrantv1client.DNSRecordInterface {
	return n.clientCache.ClusterOrDie(n.clusterPath).DNSRecords(namespace)
}
