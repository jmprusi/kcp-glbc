
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	"github.com/kcp-dev/logicalcluster/v3"
	kcptesting "github.com/kcp-dev/client-go/third_party/k8s.io/client-go/testing"

	"k8s.io/apimachinery/pkg/runtime/schema"
	"context"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/apis/kuadrant/v1"

	"k8s.io/apimachinery/pkg/watch"

	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/testing"

	"k8s.io/apimachinery/pkg/types"

	kcpkuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/clientset/versioned/cluster/typed/kuadrant/v1"

	kuadrantv1client "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/clientset/versioned/typed/kuadrant/v1"
)

var dNSRecordsResource = schema.GroupVersionResource{Group: "kuadrant.dev", Version: "v1", Resource: "dnsrecords"}
var dNSRecordsKind = schema.GroupVersionKind{Group: "kuadrant.dev", Version: "v1", Kind: "DNSRecord"}

type dNSRecordsClusterClient struct {
	*kcptesting.Fake
}

// Cluster scopes the client down to a particular cluster.
func (c *dNSRecordsClusterClient) Cluster(clusterPath logicalcluster.Path) kcpkuadrantv1.DNSRecordsNamespacer {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return &dNSRecordsNamespacer{Fake: c.Fake, ClusterPath: clusterPath}
}


// List takes label and field selectors, and returns the list of DNSRecords that match those selectors across all clusters.
func (c *dNSRecordsClusterClient) List(ctx context.Context, opts metav1.ListOptions) (*kuadrantv1.DNSRecordList, error) {
	obj, err := c.Fake.Invokes(kcptesting.NewListAction(dNSRecordsResource, dNSRecordsKind, logicalcluster.Wildcard, metav1.NamespaceAll, opts), &kuadrantv1.DNSRecordList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kuadrantv1.DNSRecordList{ListMeta: obj.(*kuadrantv1.DNSRecordList).ListMeta}
	for _, item := range obj.(*kuadrantv1.DNSRecordList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested DNSRecords across all clusters.
func (c *dNSRecordsClusterClient) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.InvokesWatch(kcptesting.NewWatchAction(dNSRecordsResource, logicalcluster.Wildcard, metav1.NamespaceAll, opts))
}
type dNSRecordsNamespacer struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
}

func (n *dNSRecordsNamespacer) Namespace(namespace string) kuadrantv1client.DNSRecordInterface {
	return &dNSRecordsClient{Fake: n.Fake, ClusterPath: n.ClusterPath, Namespace: namespace}
}
type dNSRecordsClient struct {
	*kcptesting.Fake
	ClusterPath logicalcluster.Path
	Namespace string
}


func (c *dNSRecordsClient) Create(ctx context.Context, dNSRecord *kuadrantv1.DNSRecord, opts metav1.CreateOptions) (*kuadrantv1.DNSRecord, error) {
	obj, err := c.Fake.Invokes(kcptesting.NewCreateAction(dNSRecordsResource, c.ClusterPath, c.Namespace, dNSRecord), &kuadrantv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DNSRecord), err
}

func (c *dNSRecordsClient) Update(ctx context.Context, dNSRecord *kuadrantv1.DNSRecord, opts metav1.UpdateOptions) (*kuadrantv1.DNSRecord, error) {
	obj, err := c.Fake.Invokes(kcptesting.NewUpdateAction(dNSRecordsResource, c.ClusterPath, c.Namespace, dNSRecord), &kuadrantv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DNSRecord), err
}

func (c *dNSRecordsClient) UpdateStatus(ctx context.Context, dNSRecord *kuadrantv1.DNSRecord, opts metav1.UpdateOptions) (*kuadrantv1.DNSRecord, error) {
	obj, err := c.Fake.Invokes(kcptesting.NewUpdateSubresourceAction(dNSRecordsResource, c.ClusterPath, "status", c.Namespace, dNSRecord), &kuadrantv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DNSRecord), err
}

func (c *dNSRecordsClient) Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error {
	_, err := c.Fake.Invokes(kcptesting.NewDeleteActionWithOptions(dNSRecordsResource, c.ClusterPath, c.Namespace, name, opts), &kuadrantv1.DNSRecord{})
	return err
}

func (c *dNSRecordsClient) DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error {
	action := kcptesting.NewDeleteCollectionAction(dNSRecordsResource, c.ClusterPath, c.Namespace, listOpts)

	_, err := c.Fake.Invokes(action, &kuadrantv1.DNSRecordList{})
	return err
}

func (c *dNSRecordsClient) Get(ctx context.Context, name string, options metav1.GetOptions) (*kuadrantv1.DNSRecord, error) {
	obj, err := c.Fake.Invokes(kcptesting.NewGetAction(dNSRecordsResource, c.ClusterPath, c.Namespace, name), &kuadrantv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DNSRecord), err
}

// List takes label and field selectors, and returns the list of DNSRecords that match those selectors.
func (c *dNSRecordsClient) List(ctx context.Context, opts metav1.ListOptions) (*kuadrantv1.DNSRecordList, error) {
	obj, err := c.Fake.Invokes(kcptesting.NewListAction(dNSRecordsResource, dNSRecordsKind, c.ClusterPath, c.Namespace, opts), &kuadrantv1.DNSRecordList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &kuadrantv1.DNSRecordList{ListMeta: obj.(*kuadrantv1.DNSRecordList).ListMeta}
	for _, item := range obj.(*kuadrantv1.DNSRecordList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

func (c *dNSRecordsClient) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.Fake.InvokesWatch(kcptesting.NewWatchAction(dNSRecordsResource, c.ClusterPath, c.Namespace, opts))
}

func (c *dNSRecordsClient) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (*kuadrantv1.DNSRecord, error) {
	obj, err := c.Fake.Invokes(kcptesting.NewPatchSubresourceAction(dNSRecordsResource, c.ClusterPath, c.Namespace, name, pt, data, subresources...), &kuadrantv1.DNSRecord{})
	if obj == nil {
		return nil, err
	}
	return obj.(*kuadrantv1.DNSRecord), err
}
