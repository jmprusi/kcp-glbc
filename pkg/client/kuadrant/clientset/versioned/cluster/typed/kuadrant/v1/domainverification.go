
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package v1

import (
	kcpclient "github.com/kcp-dev/apimachinery/v2/pkg/client"
	"github.com/kcp-dev/logicalcluster/v3"
	"context"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/watch"
	kuadrantv1 "github.com/kuadrant/kcp-glbc/pkg/apis/kuadrant/v1"


	kuadrantv1client "github.com/kuadrant/kcp-glbc/pkg/client/kuadrant/clientset/versioned/typed/kuadrant/v1"
)

// DomainVerificationsClusterGetter has a method to return a DomainVerificationClusterInterface.
// A group's cluster client should implement this interface.
type DomainVerificationsClusterGetter interface {
	DomainVerifications() DomainVerificationClusterInterface
}

// DomainVerificationClusterInterface can operate on DomainVerifications across all clusters,
// or scope down to one cluster and return a kuadrantv1client.DomainVerificationInterface.
type DomainVerificationClusterInterface interface {
	Cluster(logicalcluster.Path) kuadrantv1client.DomainVerificationInterface
	List(ctx context.Context, opts metav1.ListOptions) (*kuadrantv1.DomainVerificationList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
}

type domainVerificationsClusterInterface struct {
	clientCache kcpclient.Cache[*kuadrantv1client.KuadrantV1Client]
}

// Cluster scopes the client down to a particular cluster.
func (c *domainVerificationsClusterInterface) Cluster(clusterPath logicalcluster.Path) kuadrantv1client.DomainVerificationInterface {
	if clusterPath == logicalcluster.Wildcard {
		panic("A specific cluster must be provided when scoping, not the wildcard.")
	}

	return c.clientCache.ClusterOrDie(clusterPath).DomainVerifications()
}


// List returns the entire collection of all DomainVerifications across all clusters. 
func (c *domainVerificationsClusterInterface) List(ctx context.Context, opts metav1.ListOptions) (*kuadrantv1.DomainVerificationList, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).DomainVerifications().List(ctx, opts)
}

// Watch begins to watch all DomainVerifications across all clusters.
func (c *domainVerificationsClusterInterface) Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientCache.ClusterOrDie(logicalcluster.Wildcard).DomainVerifications().Watch(ctx, opts)
}
